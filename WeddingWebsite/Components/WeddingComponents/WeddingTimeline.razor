@using WeddingWebsite.Models.WebsiteElement
@using WeddingWebsite.Models.WeddingDetails
@using WeddingWebsite.Models
@using WeddingWebsite.Models.Venues

@inject IWeddingDetails WeddingDetails

<MudTimeline TimelinePosition="TimelinePosition.Alternate">
    @foreach (var item in timelineItems) {
        <MudTimelineItem Size=@item.GetDotSize() Color=Color.Primary Elevation="25">
            <ItemOpposite>
                <MudText Color="Color.Primary" Typo="Typo.h6">@item.Time</MudText>
            </ItemOpposite>
            <ItemContent>
                <TimelineItemBox Item="@item"/>
            </ItemContent>
            <ItemDot>
                @if (item.Icon != null) {
                    <MudIcon Icon=@item.Icon Style="width: 100%" />
                }
            </ItemDot>
        </MudTimelineItem>
    }
</MudTimeline>

@code {

    private IEnumerable<TimelineItem> timelineItems = [];
    
    protected override void OnInitialized()
    {
        string? previousVenueName = null;
        TimeOnly? previousEndTime = null;
        
        foreach (var ev in WeddingDetails.Events)
        {
            // Generate a timeline item for the venue change
            if (previousVenueName != ev.Venue.Name && ev.Venue.Directions != null) {
                timelineItems = timelineItems.Append(GenerateTransportTimelineItem(ev, previousEndTime, previousVenueName));
            }
            
            // Update previous venue
            previousVenueName = ev.Venue.Name;
            previousEndTime = ev.End;
            
            // Generate a timeline item for the event itself
            timelineItems = timelineItems.Append(new TimelineItem
            (
                TimelineItemType.Event,
                ev.Start.ToShortTimeString(),
                ev.Name,
                "",
                ev.Venue.Name,
                ev.Modals,
                ev.Icon,
                ev.Image
            ) {
                Description = ev.Description
            });
        }
        
        // Finally, add an accommodation item if appropriate
        if (WeddingDetails.AccommodationDetails.Hotels.Any()) {
            timelineItems = timelineItems.Append(GenerateAccommodationTimelineItem());
        }
    }
    
    private TimelineItem GenerateTransportTimelineItem(Event ev, TimeOnly? previousEndTime, string? previousVenueName) {
        return new TimelineItem (
            type : TimelineItemType.VenueChange,
            time : previousEndTime?.ToShortTimeString() ?? "Start",
            title : "Transport",
            description : ev.Venue.Directions!.Description,
            venueName : previousVenueName != null ? previousVenueName + " → " + ev.Venue.Name : "Your House → " + ev.Venue.Name,
            modals : [new WeddingModal("Travel Directions", ev.Venue.Directions!.Content.Prepend(GenerateTransportTopSection(ev.Venue)))],
            icon: Icons.Material.Filled.DirectionsCar,
            image : ev.Venue.Directions?.CoverImage,
            mapsLocation: ev.Venue.Directions?.CoverImage == null ? ev.Venue.Location : null
        );
    }
    
    private WebsiteSection GenerateTransportTopSection(Venue venue) {
        return new WebsiteSection("Address", venue.Address, new WebsiteGoogleMapsEmbed(venue.Location));
    }
    
    private TimelineItem GenerateAccommodationTimelineItem() {
        return new TimelineItem(
            TimelineItemType.Accommodation,
            WeddingDetails.Events.LastOrDefault()?.End.ToString() ?? "End",
            "Accommodation",
            WeddingDetails.AccommodationDetails.Description ?? "If you would like to book accommodation, here are some recommendations",
            GenerateAccommodationShortString(),
            [new WeddingModal("Suggested Hotels", GenerateAccommodationDetails(WeddingDetails.AccommodationDetails))],
            @Icons.Material.Filled.Hotel,
            WeddingDetails.AccommodationDetails.Image
        );
    }
    
    private IEnumerable<WebsiteSection> GenerateAccommodationDetails(AccommodationDetails details) {
        IEnumerable<WebsiteSection> sections = [];
        foreach (var hotel in details.Hotels) {
            sections = sections.Append(new WebsiteSection(
                (hotel.Emphasise ? "[Recommended] " : "") + hotel.Name,
                [
                    hotel.Description,
                    $"Address: {hotel.Address}",
                    $"Price: {hotel.PriceString}",
                    $"Distance: {hotel.DrivingTimeFromVenueMinutes} minutes",
                    $"Link: {hotel.Link}"
                ],
                new WebsiteGoogleMapsEmbed(hotel.Location)
            ));
        }
        return sections;
    }
    
    private string GenerateAccommodationShortString() {
        if (!WeddingDetails.AccommodationDetails.Hotels.Any(hotel => hotel.Emphasise)) {
            return string.Join(", ", WeddingDetails.AccommodationDetails.Hotels.Select(hotel => hotel.Name));
        } else {
            return string.Join(", ", WeddingDetails.AccommodationDetails.Hotels.Where(hotel => hotel.Emphasise).Select(hotel => hotel.Name)) + " (or " + (WeddingDetails.AccommodationDetails.Hotels.Count(hotel => !hotel.Emphasise)) + " others)";
        }
    }
    
    public class TimelineItem (
        TimelineItemType type,
        string time,
        string title,
        string description,
        string venueName,
        IEnumerable<WeddingModal> modals,
        string? icon = null,
        WebsiteImage? image = null,
        Location? mapsLocation = null
    )
    {
        public TimelineItemType Type { get; } = type;
        public string Time { get; } = time;
        public string Title { get; } = title;
        public IEnumerable<WebsiteSection> Description { get; init; } = [new (null, description)];
        public string VenueName { get; } = venueName;
        public IEnumerable<WeddingModal> Modals { get; } = modals;
        public string? Icon { get; } = icon;
        public WebsiteImage? Image { get; } = image;
        public Location? MapsLocation { get; } = mapsLocation;
        
        public Size GetDotSize() => Icon == null ? Size.Small : Size.Medium;
    };
    
    public enum TimelineItemType
    {
        VenueChange,
        Event,
        Accommodation
    }
}
