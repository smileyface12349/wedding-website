@using WeddingWebsite.Models.WebsiteElement
@using WeddingWebsite.Models.WeddingDetails
@using WeddingWebsite.Components.Containers
@using WeddingWebsite.Components.Elements

@inject IWeddingDetails WeddingDetails

<MudTimeline>
    @foreach (var item in timelineItems) {
        <MudTimelineItem Color=Color.Primary Elevation="25" TimelineAlign="TimelineAlign.End">
            <ItemOpposite>
                <MudText Color="Color.Primary" Typo="Typo.h6">@item.Time</MudText>
            </ItemOpposite>
            <ItemContent>
                <OutlinedBox>
                    <h2>@item.Title</h2>
                    <p>@item.Description</p>
                    <p>@item.VenueName</p>
                    @foreach (var modal in item.Modals) {
                        <Button>@modal.Label</Button>
                    }
                </OutlinedBox>
            </ItemContent>
            <ItemDot>
                @if (item.Type == TimelineItemType.VenueChange) {
                    <MudIcon Icon="@Icons.Material.Filled.DirectionsCar"/>
                }
            </ItemDot>
        </MudTimelineItem>
    }
</MudTimeline>

@code {

    private IEnumerable<TimelineItem> timelineItems = [];
    
    protected override void OnInitialized()
    {
        string? previousVenueName = null;
        TimeOnly? previousEndTime = null;
        foreach (var ev in WeddingDetails.Events)
        {
            // Generate a timeline item for the venue change
            if (previousVenueName != ev.Venue.Name) {
                timelineItems = timelineItems.Append(new TimelineItem (
                    Type : TimelineItemType.VenueChange,
                    Time : previousEndTime?.ToShortTimeString() ?? "??:??",
                    Title : "Transport",
                    Description : ev.Venue.Directions?.DrivingTimeInMinutes?.ToString() + " min drive" ?? "Venue change",
                    VenueName : previousVenueName != null ? previousVenueName + " ➡️ " + ev.Venue.Name : " ➡️ " + ev.Venue.Name,
                    Modals : [new WeddingModal("Travel Directions", "TODO")]
                ));
            }
            
            // Update previous venue
            previousVenueName = ev.Venue.Name;
            previousEndTime = ev.End;
            
            // Generate a timeline item for the event itself
            timelineItems = timelineItems.Append(new TimelineItem
            (
                TimelineItemType.Event,
                ev.Start.ToShortTimeString(),
                ev.Name,
                ev.Description,
                ev.Venue.Name,
                ev.Modals
            ));
        }
    }
    
    private class TimelineItem (
        TimelineItemType Type,
        string Time,
        string Title,
        string Description,
        string VenueName,
        IEnumerable<WeddingModal> Modals
    )
    {
        public TimelineItemType Type { get; } = Type;
        public string Time { get; } = Time;
        public string Title { get; } = Title;
        public string Description { get; } = Description;
        public string VenueName { get; } = VenueName;
        public IEnumerable<WeddingModal> Modals { get; } = Modals;
        
        public Color GetColour()
        {
            return Type switch
            {
                TimelineItemType.VenueChange => Color.Secondary,
                TimelineItemType.Event => Color.Primary,
                _ => Color.Default
            };
        }
    };
    
    private enum TimelineItemType
    {
        VenueChange,
        Event
    }

}