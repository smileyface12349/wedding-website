@using WeddingWebsite.Models.WebsiteElement
@using WeddingWebsite.Models.WeddingDetails
@using WeddingWebsite.Components.Containers
@using WeddingWebsite.Components.Elements

@inject IWeddingDetails WeddingDetails

<MudTimeline>
    @foreach (var item in timelineItems) {
        <MudTimelineItem Size=@item.GetDotSize() Color=Color.Primary Elevation="25" TimelineAlign="TimelineAlign.End">
            <ItemOpposite>
                <MudText Color="Color.Primary" Typo="Typo.h6">@item.Time</MudText>
            </ItemOpposite>
            <ItemContent>
                <OutlinedBox>
                    <h2>@item.Title</h2>
                    <p class="event-description">@item.Description</p>
                    @foreach (var modal in item.Modals) {
                        <Button>@modal.Label</Button>
                    }
                    <div class="event-location">
                        <MudIcon Icon="@Icons.Material.Filled.LocationOn"/>
                        <span>@item.VenueName</span>
                    </div>
                </OutlinedBox>
            </ItemContent>
            <ItemDot>
                @if (item.Type == TimelineItemType.VenueChange) {
                    <MudIcon Icon="@Icons.Material.Filled.DirectionsCar" Style="width: 100%" />
                } else if (item.Type == TimelineItemType.Accommodation) {
                    <MudIcon Icon="@Icons.Material.Filled.Hotel" Style="width: 100%" />
                }
            </ItemDot>
        </MudTimelineItem>
    }
</MudTimeline>

@code {

    private IEnumerable<TimelineItem> timelineItems = [];
    
    protected override void OnInitialized()
    {
        string? previousVenueName = null;
        TimeOnly? previousEndTime = null;
        foreach (var ev in WeddingDetails.Events)
        {
            // Generate a timeline item for the venue change
            if (previousVenueName != ev.Venue.Name) {
                timelineItems = timelineItems.Append(new TimelineItem (
                    Type : TimelineItemType.VenueChange,
                    Time : previousEndTime?.ToShortTimeString() ?? "Start",
                    Title : "Transport",
                    Description : ev.Venue.Directions?.DrivingTimeInMinutes != null ? ev.Venue.Directions?.DrivingTimeInMinutes + " min drive." : "Travel to the venue.",
                    VenueName : previousVenueName != null ? previousVenueName + " → " + ev.Venue.Name : "Your House → " + ev.Venue.Name,
                    Modals : [new WeddingModal("Travel Directions", "TODO")]
                ));
            }
            
            // Update previous venue
            previousVenueName = ev.Venue.Name;
            previousEndTime = ev.End;
            
            // Generate a timeline item for the event itself
            timelineItems = timelineItems.Append(new TimelineItem
            (
                TimelineItemType.Event,
                ev.Start.ToShortTimeString(),
                ev.Name,
                ev.Description,
                ev.Venue.Name,
                ev.Modals
            ));
        }
        
        // Finally, add an accommodation item if appropriate
        if (WeddingDetails.AccommodationDetails.Hotels.Any()) {
            timelineItems = timelineItems.Append(new TimelineItem(
                TimelineItemType.Accommodation,
                previousEndTime?.ToShortTimeString() ?? "??:??",
                "Accommodation",
                WeddingDetails.AccommodationDetails.Description ?? "If you would like to book accommodation, here are some recommendations",
                WeddingDetails.AccommodationDetails.Hotels.First().Name + " (or " + (WeddingDetails.AccommodationDetails.Hotels.Count-1) + " others)",
                [new WeddingModal("Suggested Hotels", "TODO: Info about all the hotels")]
            ));
        }
    }
    
    private class TimelineItem (
        TimelineItemType Type,
        string Time,
        string Title,
        string Description,
        string VenueName,
        IEnumerable<WeddingModal> Modals
    )
    {
        public TimelineItemType Type { get; } = Type;
        public string Time { get; } = Time;
        public string Title { get; } = Title;
        public string Description { get; } = Description;
        public string VenueName { get; } = VenueName;
        public IEnumerable<WeddingModal> Modals { get; } = Modals;
        
        public Size GetDotSize() => Type == TimelineItemType.Event ? Size.Small : Size.Medium;
    };
    
    private enum TimelineItemType
    {
        VenueChange,
        Event,
        Accommodation
    }

}