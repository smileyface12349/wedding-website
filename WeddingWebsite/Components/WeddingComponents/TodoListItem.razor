@using System.Text.RegularExpressions
@using WeddingWebsite.Models.Todo
@using WeddingWebsite.Services
@using WeddingWebsite.Components.Elements

@inject ITodoService TodoService

@if (Item == null)
{
    <div>ERROR: Item not found.</div>
    return;
}

<div class="todo-item">
    @if (IsEditing)
    {
        <input type="text" @bind="Text" class="todo-edit-input" placeholder="What needs doing?" />
    }
    else
    {
        <div class="todo-text">@Item.Text</div>
    }
    <MudSpacer/>
    @if (Item.OwnerEmail != null)
    {
        <div class="todo-owner">Owner: @Item.OwnerEmail</div>
    }
    else
    {
        <div class="todo-owner">No owner assigned</div>
    }
    @if (IsEditing)
    {
        @if (Item.Group == null)
        {
            <Button OnClick="Group">Add Group</Button>
        }
        <button @onclick="SaveEdits" class="invisible-button">
            <MudIcon Icon="@Icons.Material.Filled.Save"/>
        </button>
        <button @onclick="Delete" class="invisible-button">
            <MudIcon Icon="@Icons.Material.Filled.Delete" Color="Color.Error"/>
        </button>
        <button @onclick="CancelEdits" class="invisible-button">
            <MudIcon Icon="@Icons.Material.Filled.Cancel"/>
        </button>
    }
    else
    {
        @if (Item.Status is TodoItemStatus.Waiting or TodoItemStatus.Completed)
        {
            <button @onclick="MarkItemAsActionRequired" class="invisible-button">
                <MudIcon Icon="@Icons.Material.Filled.Warning"/>
            </button>
        }
        @if (Item.Status == TodoItemStatus.ActionRequired)
        {
            <button @onclick="MarkItemAsWaiting" class="invisible-button">
                <MudIcon Icon="@Icons.Material.Filled.AccessTime"/>
            </button>
        }
        @if (Item.Status is TodoItemStatus.ActionRequired or TodoItemStatus.Waiting)
        {
            <button @onclick="MarkItemAsCompleted" class="invisible-button">
                <MudIcon Icon="@Icons.Material.Filled.Done"/>
            </button>
        }
        <button @onclick="EnableEditMode" class="invisible-button">
            <MudIcon Icon="@Icons.Material.Filled.Edit"/>
        </button>
    }
    
</div>

@code {
    [Parameter]
    public TodoItem? Item { get; set; }
    
    [Parameter]
    public Action? ParentStateHasChanged { get; set; }
    
    private bool IsEditing { get; set; }
    private string Text { get; set; } = "";
    
    // Automatically enable edit mode for new items
    protected override void OnParametersSet()
    {
        if (Item?.Text == null)
        {
            IsEditing = true;
            Text = "";
        }
    }

    private void EnableEditMode()
    {
        if (Item == null) return;
        IsEditing = true;
        Text = Item.Text ?? "";
        StateHasChanged();
    }
    
    private void SaveEdits()
    {
        ApplyToItem(item => TodoService.RenameItem(item.Id, Text));
        IsEditing = false;
        StateHasChanged();
    }
    
    private void CancelEdits()
    {
        IsEditing = false;
        if (Item?.Text == null)
        {
            // This prevents it from auto-enabling edit mode upon refresh, as the user has explicitly chosen for no text
            ApplyToItem(item => TodoService.RenameItem(item.Id, ""));
        }
        StateHasChanged();
    }
    
    private void ApplyToItem(Action<TodoItem> action)
    {
        if (Item == null) return;
        action(Item);
        Item = TodoService.GetTodoItem(Item.Id);
        StateHasChanged();
        ParentStateHasChanged?.Invoke();
    }

    private void MarkItemAsCompleted()
    {
        ApplyToItem(item => TodoService.MarkItemAsCompleted(item.Id));
    }
    
    private void MarkItemAsWaiting()
    {
        ApplyToItem(item => TodoService.MarkItemAsWaiting(item.Id, TimeSpan.FromDays(3)));
    }
    
    private void MarkItemAsActionRequired()
    {
        ApplyToItem(item => TodoService.MarkItemAsActionRequired(item.Id));
    }
    
    private void Group()
    {
        ApplyToItem(item => TodoService.GroupItem(item.Id));
        if (Text == Item?.Text)
        {
            CancelEdits();
        }
    }
    
    private void Delete()
    {
        ApplyToItem(item => TodoService.DeleteItem(item.Id));
        IsEditing = false;
    }
}
