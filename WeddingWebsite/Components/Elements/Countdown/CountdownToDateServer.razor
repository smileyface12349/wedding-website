@using System.Threading
<div class="container">
    <DatePart Label="Month" Value="@Months"/><BigColon/>
    <DatePart Label="Week" Value="@Weeks"/><BigColon/>
    <DatePart Label="Day" Value="@Days"/><BigColon/>
    <DatePart Label="Hour" Value="@Hours"/><BigColon/>
    <DatePart Label="Minute" Value="@Minutes"/>
    @if (ShowSeconds) {
        <BigColon/>
        <DatePart Label="Second" Value="@Seconds"/>
    }
</div>

@code {
    [Parameter]
    public required DateTime CountdownTo { get; set; }
    
    /// <summary>
    /// Warning: This component renders server-side. Enabling seconds will generate 2 HTTP requests every second.
    /// On imperfect connections, the timer is visibly laggy.
    /// </summary>
    /// <see cref="CountdownToDateServer"/>
    [Parameter]
    public bool ShowSeconds { get; set; } = false;
    
    private int Months { get; set; }
    private int Weeks { get; set; }
    private int Days { get; set; }
    private int Hours { get; set; }
    private int Minutes { get; set; }
    private int Seconds { get ; set; }
    
    private void OnTimeChange() {
        var months = 0;
        var currentDate = DateTime.Now;
        
        while (currentDate.AddMonths(1) < CountdownTo) {
            currentDate = currentDate.AddMonths(1);
            months++;
        }
        Months = months;
        
        var timeSpan = CountdownTo - currentDate;
        
        Weeks = (int) Math.Floor((double) timeSpan.Days / 7);
        Days = timeSpan.Days % 7;
        Hours = timeSpan.Hours;
        Minutes = timeSpan.Minutes;
        Seconds = timeSpan.Seconds; 
    }
    
    // Logic to update the timer each second:
    
    PeriodicTimer? periodicTimer;

    protected override void OnInitialized()
    {
        periodicTimer = new PeriodicTimer(TimeSpan.FromSeconds(ShowSeconds ? 1 : 60));
        OnTimeChange();
        RunTimer(); 
    }

    async Task RunTimer()
    {
        if (periodicTimer == null) return;
        while (await periodicTimer.WaitForNextTickAsync()) 
        { 
            OnTimeChange();
            await InvokeAsync(StateHasChanged);
        }    
    }

    public void Dispose()
    {
        periodicTimer?.Dispose();
    }
}