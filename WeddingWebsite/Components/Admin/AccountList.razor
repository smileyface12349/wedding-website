@using WeddingWebsite.Data
@using WeddingWebsite.Data.Models
@using WeddingWebsite.Models.Accounts
@using WeddingWebsite.Services

@inject IAdminService AdminService
@inject NavigationManager NavigationManager

<MudTable T="AccountWithGuests" RowStyle="cursor: pointer" Items="@Accounts" Filter="new Func<AccountWithGuests, bool>(SearchFilter)" Hover="true" OnRowClick="RowClicked">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Accounts</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"/>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<AccountWithGuests, object?>(x => x.Email)">Email</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AccountWithGuests, object?>(x => x.Guests.Count())">Guests</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AccountWithGuests, object?>(x => x.Guests.Count(g => g.Rsvp == RsvpStatus.NotResponded))">RSVP</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Guests">@GetGuestNames(context)</MudTd>
        <MudTd DataLabel="RSVP">@GetRsvpSummary(context)</MudTd>
    </RowTemplate>
</MudTable>

@code {
    private IEnumerable<AccountWithGuests> Accounts { get; set; } = [];

    private string GetGuestNames(AccountWithGuests account)
    {
        if (account.Guests.Any())
        {
            return string.Join(", ", account.Guests.Select(guest => guest.Name.Full));
        }
        else
        {
            return "[No guests]";
        }
    }
        

    private string GetRsvpSummary(AccountWithGuests account)
    {
        if (!account.Guests.Any())
            return "N/A";

        if (account.Guests.Count() == 1)
        {
            var guest = account.Guests.First();
            return guest.Rsvp switch
            {
                RsvpStatus.NotResponded => "No response",
                RsvpStatus.Yes => "Yes",
                RsvpStatus.No => "No",
                _ => "Error"
            };
        }
        
        if (account.Guests.All(g => g.Rsvp == RsvpStatus.NotResponded))
            return "No responses";
        if (account.Guests.All(g => g.Rsvp == RsvpStatus.No))
            return $"No (all {account.Guests.Count()})";
        if (account.Guests.All(g => g.Rsvp == RsvpStatus.Yes))
            return $"Yes (all {account.Guests.Count()})";
        
        var numYes = account.Guests.Count(g => g.Rsvp == RsvpStatus.Yes);
        var numNo = account.Guests.Count(g => g.Rsvp == RsvpStatus.No);
        var numWaiting = account.Guests.Count(g => g.Rsvp == RsvpStatus.NotResponded);

        if (numWaiting > 0)
        {
            return numNo > 0 
                ? $"{numYes} yes, {numNo} no, {numWaiting} waiting"
                : $"{numYes} yes, {numWaiting} waiting";
        }
        return $"{numYes} yes, {numNo} no";
    }
    
    private void RowClicked(TableRowClickEventArgs<AccountWithGuests> args)
    {
        if (args.Item == null)
        {
            return;
        }
        var accountId = args.Item.Id;
        NavigationManager.NavigateTo($"/admin/account/{accountId}");
    }

    protected override void OnInitialized()
    {
        Accounts = AdminService.GetAllAccounts();
    }

    private string searchString = "";
    
    private bool SearchFilter(AccountWithGuests account)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (account.Email != null && account.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (account.Guests.Any(guest => guest.Name.Full.Contains(searchString, StringComparison.OrdinalIgnoreCase)))
            return true;
        return false;
    }

}