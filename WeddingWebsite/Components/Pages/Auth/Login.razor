@page "/account/login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using WeddingWebsite.Components.Containers
@using WeddingWebsite.Core
@using WeddingWebsite.Data
@using WeddingWebsite.Models.Theme
@using WeddingWebsite.Models.WebsiteConfig
@using WeddingWebsite.Models.WeddingDetails

@inject SignInManager<Account> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IWeddingDetails WeddingDetails
@inject IWebsiteConfig Config

@attribute [AllowAnonymous]

<PageTitle>Log in</PageTitle>

<img class="background-image" src="@WeddingDetails.MainImage.Url" alt="@WeddingDetails.MainImage.AltText"/>

<div class="container">
    <CascadingValue Value="ModalTheme">
        <Box>
            <h1>Log in</h1>
            <p>@errorMessage</p>
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator/>
                <hr/>
                <ValidationSummary class="text-danger" role="alert"/>
                <div>
                    <label for="email" class="form-label">Email</label>
                    <InputText @bind-Value="Input.Email" class="input" autocomplete="username" aria-required="true" placeholder="name@example.com" id="email"/>
                    <ValidationMessage For="() => Input.Email" class="text-danger"/>
                </div>
                <div>
                    <label for="password" class="form-label">Password</label>
                    <InputText type="password" @bind-Value="Input.Password" class="input" autocomplete="current-password" aria-required="true" placeholder="password" id="password"/>
                    <ValidationMessage For="() => Input.Password" class="text-danger"/>
                </div>
                <div>
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input"/>
                        Remember me
                    </label>
                </div>
                <div>
                    <button type="submit" style="background: @ModalTheme.Primary">Log in</button>
                </div>
                <p>Forgot your password? Please contact me to reset it.</p>
                @* <div> *@
                @*     <p> *@
                @*         <a href="Account/ForgotPassword">Forgot your password?</a> *@
                @*     </p> *@
                @*     <p> *@
                @*         <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a> *@
                @*     </p> *@
                @*     <p> *@
                @*         <a href="Account/ResendEmailConfirmation">Resend email confirmation</a> *@
                @*     </p> *@
                @* </div> *@
            </EditForm>
        </Box>
    </CascadingValue>
</div>

@code {
    private string? errorMessage;

    private SectionTheme ModalTheme => new(Colour.DarkGrey, Config.Colours.Primary, new BoxStyle(BoxType.Filled, new SectionTheme(Colour.White, Config.Colours.Primary, null)));

    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext != null && HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
