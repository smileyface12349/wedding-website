@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using WeddingWebsite.Components.Sections
@using WeddingWebsite.Core
@using WeddingWebsite.Data
@using WeddingWebsite.Services

@inject UserManager<Account> UserManager
@inject IUserStore<Account> UserStore
@inject SignInManager<Account> SignInManager
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IAdminService AdminService

@attribute [Authorize ( Roles = "Admin") ]

<PageTitle>Register</PageTitle>

<Section>
    
    <h1>Create Account</h1>
    <p>Create a new account for someone else.</p>
    
    <div class="row">
        <div class="col-md-4">
            <p>@Message</p>
            <EditForm Model="Input" method="post" OnValidSubmit="RegisterUser" FormName="register">
                <DataAnnotationsValidator />
                <h2>Account Details</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating">
                    <label for="email">Email</label>
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="john@smith.com" id="email" />
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating">
                    <label for="password">Password</label>
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" id="password" />
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="form-floating">
                    <label for="confirm-password">Confirm Password</label>
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" id="confirm-password" />
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                </div>
                <h2>Guests</h2>
                <p>Quickly add some guests now, or add them later. Please enter first name and surname, or leave them blank.</p>
                <div class="form-floating">
                    <label for="guest1">Guest 1 (optional)</label>
                    <InputText @bind-Value="Input.Guest1" class="form-control" placeholder="John Smith" id="guest1" />
                </div>
                <div class="form-floating">
                    <label for="guest2">Guest 2 (optional)</label>
                    <InputText @bind-Value="Input.Guest2" class="form-control" placeholder="Jane Smith" id="guest2" />
                </div>
                <div class="form-floating">
                    <label for="guest3">Guest 3 (optional)</label>
                    <InputText @bind-Value="Input.Guest3" class="form-control" placeholder="Johnny Smith" id="guest3" />
                </div>
                <p>If you want to add more than three guests, please add three now and the rest later.</p>
                <button type="submit">Register</button>
            </EditForm>
        </div>
    </div>

</Section>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
        }
        
        foreach (var guestName in new[] { Input.Guest1, Input.Guest2, Input.Guest3 })
        {
            if (string.IsNullOrWhiteSpace(guestName)) continue;
            var names = guestName.Split(' ', 2);
            var firstName = names[0];
            var lastName = names.Length > 1 ? names[1] : "";
            AdminService.AddGuestToAccount(user.Id, firstName, lastName);
        }
    }

    private Account CreateUser()
    {
        try
        {
            return Activator.CreateInstance<Account>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(Account)}'. " +
                $"Ensure that '{nameof(Account)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<Account> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<Account>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Display(Name = "Guest 1 (optional)")] public string Guest1 { get; set; } = "";
        [Display(Name = "Guest 2 (optional)")] public string Guest2 { get; set; } = "";
        [Display(Name = "Guest 3 (optional)")] public string Guest3 { get; set; } = "";
    }
}
