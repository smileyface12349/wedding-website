@page "/Admin/Account/{UserId}"

@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@using WeddingWebsite.Components.Layouts
@using WeddingWebsite.Core
@using WeddingWebsite.Data
@using WeddingWebsite.Data.Models
@using WeddingWebsite.Models
@using WeddingWebsite.Models.Accounts
@using WeddingWebsite.Services

@layout SimpleLayout

@attribute [Authorize(Roles = "Admin")]

@inject UserManager<Account> UserManager
@inject IAdminService AdminService
@inject IAccountService AccountService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Manage Account</PageTitle>

<h1 class="text-center">Manage Account</h1>

<div class="narrow-section">
    @if (SomethingDiffers)
    {
        <p class="text-red">You have unsaved changes. Press the apply button besides the red input(s) to apply.</p>
    }

    @if (ErrorText != "")
    {
        <p class="text-red">@ErrorText</p>
    }

    <div class="flex-container mb">
        <label for="email">Email</label>
        <span class="flex-grow"></span>
        <input @bind-value="Email" id="email" class="mr @EmailDiffers" />
        <button @onclick="ApplyEmailChange">Apply</button>
    </div>

    <div class="flex-container mb">
        <label for="new-password">New Password</label>
        <span class="flex-grow"></span>
        <input type="password" @bind-value="NewPassword" id="new-password" class="mr @PasswordDiffers" placeholder="Reset their password" />
        <button @onclick="ApplyPasswordChange">Apply</button>
    </div>
    
</div>

<h2>Guests</h2>
<p>Click on a guest to manage/delete them.</p>
<MudTable T="GuestWithId" Items="Guests" Class="mb" RowStyle="cursor: pointer" Hover="true" OnRowClick="RowClicked">
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<GuestWithId, object?>(x => x.Name.Full)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<GuestWithId, object?>(x => x.Rsvp)">RSVP</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name.Full</MudTd>
        <MudTd DataLabel="RSVP">@context.Rsvp.GetEnumDescription()</MudTd>
    </RowTemplate>
</MudTable>
<div class="flex-container mb">
    <label for="new-guest">Add Extra Guest</label>
    <span class="flex-grow"></span>
    <input id="new-guest" @bind-value="NewGuestName" class="mr" placeholder="Full Name" />
    <button @onclick="AddNewGuest">Add</button>
</div>

<h2>Permissions</h2>
<AuthorizeView Roles="Owner">
    <Authorized>
        @if (IsUserAdmin())
        {
            <p>This user is an administrator.</p>
            @if (IsUserOwner())
            {
                <p>This user is an owner. To modify owners, you will need to run manual SQL queries.</p>
            }
            else
            {
                <button @onclick="DemoteUser">Demote</button>
            }
        }
        else
        {
            <p>This user does not have any special permissions.</p>
            <button @onclick="PromoteUser">Promote to Admin</button>
        }
    </Authorized>
    <NotAuthorized>
        @if (IsUserOwner())
        {
            <p>Role: Owner.</p>
        }
        else if (IsUserAdmin())
        {
            <p>Role: Admin.</p>
        }
        else
        {
            <p>No special permissions.</p>
        }
        <p>Only owners can update permissions.</p>
    </NotAuthorized>
</AuthorizeView>
    

<h2>Logs</h2>
<p>Logs are read-only. Times are in UTC.</p>
<MudTable T="AccountLog" Items="Logs" Class="mb">
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<AccountLog, object?>(x => x.Date)">Date</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AccountLog, object?>(x => x.LogType)">Description</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AccountLog, object?>(x => x.Actor.Email)">Done By</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Date.Day/@context.Date.Month/@context.Date.Year @context.Date.Hour:@context.Date.Minute</MudTd>
        <MudTd>@context.Description</MudTd>
        <MudTd>@context.Actor.Email</MudTd>
    </RowTemplate>
</MudTable>

@code {
    [Parameter] public required string UserId { get; set; }

    private Account? Account { get; set; }
    private IEnumerable<GuestWithId> Guests { get; set; } = [];
    private IEnumerable<AccountLog> Logs { get; set; } = [];

    private string ErrorText { get; set; } = "";
    private string Email { get; set; } = "";
    private string NewPassword { get; set; } = "";
    private string NewGuestName { get; set; } = "";

    private bool SomethingDiffers => EmailDiffers != "" || PasswordDiffers != "";
    private string EmailDiffers => Account is null || Account.Email == Email ? "" : "input-error";
    private string PasswordDiffers => NewPassword == "" ? "" : "input-error";
    
    private ClaimsPrincipal LoggedInUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        LoggedInUser = authenticationState.User;
        
        Account = await UserManager.FindByIdAsync(UserId);
        Email = Account?.Email ?? "";
        
        if (Account is null)
        {
            ErrorText = "Could not find that user.";
            return;
        }
        
        Guests = AdminService.GetGuestsForAccount(Account.Id);
        Logs = AdminService.GetAccountLogs(UserId);
    }
    
    private void RowClicked(TableRowClickEventArgs<GuestWithId> args)
    {
        if (args.Item == null || Account is null)
        {
            return;
        }
        var guest = args.Item;
        NavigationManager.NavigateTo($"/admin/account/{Account.Id}/{guest.Id}");
    }

    private void ApplyEmailChange()
    {
        if (Account is null)
        {
            return;
        }

        var oldEmail = Account.Email;
        Account.Email = Email;
        Account.UserName = Email;
        var result = UserManager.UpdateAsync(Account).Result;
        if (!result.Succeeded)
        {
            ErrorText = string.Join(" ", result.Errors.Select(e => e.Description));
        }
        else
        {
            AccountService.Log(LoggedInUser, AccountLogType.ChangeEmail, $"Admin changed their email from {oldEmail} to {Email}", UserId);
            Logs = AdminService.GetAccountLogs(UserId);
        }
    }

    private void ApplyPasswordChange()
    {
        if (Account is null) return;
        
        var token = UserManager.GeneratePasswordResetTokenAsync(Account).Result;
        var result = UserManager.ResetPasswordAsync(Account, token, NewPassword).Result;
        if (!result.Succeeded)
        {
            ErrorText = string.Join(" ", result.Errors.Select(e => e.Description));
        }
        else
        {
            NewPassword = "";
            AccountService.Log(LoggedInUser, AccountLogType.ChangePassword, "Admin changed their password", UserId);
            Logs = AdminService.GetAccountLogs(UserId);
        }
    }

    private void AddNewGuest()
    {
        if (Account is null) return;
        if (NewGuestName == "") return;

        var name = NewGuestName.Split(" ");
        var firstName = name.First();
        var lastName = name.Length > 1 ? string.Join(" ", name.Skip(1)) : "";
        AdminService.AddGuestToAccount(Account.Id, firstName, lastName);
        Guests = AdminService.GetGuestsForAccount(Account.Id);
        NewGuestName = "";
        AccountService.Log(LoggedInUser, AccountLogType.AddGuest, $"Add guest: {firstName} {lastName}", UserId);
        Logs = AdminService.GetAccountLogs(UserId);
    }
    
    private bool IsUserAdmin()
    {
        if (Account is null) return false;
        return UserManager.IsInRoleAsync(Account, "Admin").Result;
    }
    
    private bool IsUserOwner()
    {
        if (Account is null) return false;
        return UserManager.IsInRoleAsync(Account, "Owner").Result;
    }

    [Authorize (Roles = "Owner")]
    private void DemoteUser()
    {
        if (Account is null) return;
        var result = UserManager.RemoveFromRoleAsync(Account, "Admin").Result;
        if (!result.Succeeded)
        {
            ErrorText = string.Join(" ", result.Errors.Select(e => e.Description));
        } 
        else
        {
            AccountService.Log(LoggedInUser, AccountLogType.ChangePermissions, "Demoted from Admin to User", UserId);
            Logs = AdminService.GetAccountLogs(UserId);
        }
    }

    [Authorize (Roles = "Owner")]
    private void PromoteUser()
    {
        if (Account is null) return;
        var result = UserManager.AddToRoleAsync(Account, "Admin").Result;
        if (!result.Succeeded)
        {
            ErrorText = string.Join(" ", result.Errors.Select(e => e.Description));
        }
        else
        {
            AccountService.Log(LoggedInUser, AccountLogType.ChangePermissions, "Promoted from User to Admin", UserId);
            Logs = AdminService.GetAccountLogs(UserId);
        }
    }

}
