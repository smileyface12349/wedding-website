@page "/Admin/Account/{UserId}"

@using Microsoft.AspNetCore.Identity
@using WeddingWebsite.Components.Layouts
@using WeddingWebsite.Data

@layout SimpleLayout

@attribute [Authorize(Roles = "Admin")]

@inject UserManager<Account> UserManager
@inject RoleManager<IdentityRole> RoleManager

<PageTitle>Manage Account</PageTitle>

<div class="narrow-section">
    <h1 class="text-center">Manage Account</h1>

    @if (SomethingDiffers)
    {
        <p class="text-red">You have unsaved changes. Press the apply button besides the red input(s) to apply.</p>
    }
    
    @if (ErrorText != "")
    {
        <p class="text-red">@ErrorText</p>
    }

    <div class="flex-container mb">
        <label for="email">Email</label>
        <span class="flex-grow"></span>
        <input @bind-value="Email" id="email" class="mr @EmailDiffers" />
        <button @onclick="ApplyEmailChange">Apply</button>
    </div>
    
    <div class="flex-container mb">
        <label for="new-password">New Password</label>
        <span class="flex-grow"></span>
        <input type="password" @bind-value="NewPassword" id="new-password" class="mr @PasswordDiffers" placeholder="Can't view passwords" />
        <button @onclick="ApplyPasswordChange">Apply</button>
    </div>
    
    <AuthorizeView Roles="Owner">
        <Authorized>
            <h2>Permissions</h2>
            @if (IsUserAdmin())
            {
                <p>This user is an administrator.</p>
                @if (IsUserOwner())
                {
                    <p>This user is an owner. To modify owners, you will need to run manual SQL queries.</p>
                }
                else
                {
                    <button @onclick="DemoteUser">Demote</button>
                }
            }
            else
            {
                <p>This user does not have any special permissions.</p>
                <button @onclick="PromoteUser">Promote to Admin</button>
            }
        </Authorized>
        <NotAuthorized>
            <h2>Permissions</h2>
            @if (IsUserOwner())
            {
                <p>Role: Owner.</p>
            }
            else if (IsUserAdmin())
            {
                <p>Role: Admin.</p>
            }
            else
            {
                <p>No special permissions.</p>
            }
            <p>Only owners can update permissions.</p>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    [Parameter] public required string UserId { get; set; }

    private Account? Account { get; set; }

    private string ErrorText { get; set; } = "";
    private string Email { get; set; } = "";
    private string NewPassword { get; set; } = "";

    private bool SomethingDiffers => EmailDiffers != "" || PasswordDiffers != "";
    private string EmailDiffers => Account is null || Account.Email == Email ? "" : "input-error";
    private string PasswordDiffers => NewPassword == "" ? "" : "input-error";

    protected override async Task OnInitializedAsync()
    {
        Account = await UserManager.FindByIdAsync(UserId);
        Email = Account?.Email ?? "";
    }

    private void ApplyEmailChange()
    {
        if (Account is null)
        {
            return;
        }

        Account.Email = Email;
        Account.UserName = Email;
        var result = UserManager.UpdateAsync(Account).Result;
        if (!result.Succeeded)
        {
            ErrorText = string.Join(" ", result.Errors.Select(e => e.Description));
        }
    }

    private void ApplyPasswordChange()
    {
        if (Account is null) return;
        
        var token = UserManager.GeneratePasswordResetTokenAsync(Account).Result;
        var result = UserManager.ResetPasswordAsync(Account, token, NewPassword).Result;
        if (!result.Succeeded)
        {
            ErrorText = string.Join(" ", result.Errors.Select(e => e.Description));
        }
        else
        {
            NewPassword = "";
        }
    }
    
    private bool IsUserAdmin()
    {
        if (Account is null) return false;
        return UserManager.IsInRoleAsync(Account, "Admin").Result;
    }
    
    private bool IsUserOwner()
    {
        if (Account is null) return false;
        return UserManager.IsInRoleAsync(Account, "Owner").Result;
    }

    [Authorize (Roles = "Owner")]
    private void DemoteUser()
    {
        if (Account is null) return;
        var result = UserManager.RemoveFromRoleAsync(Account, "Admin").Result;
        if (!result.Succeeded)
        {
            ErrorText = string.Join(" ", result.Errors.Select(e => e.Description));
        }
    }

    [Authorize (Roles = "Owner")]
    private void PromoteUser()
    {
        if (Account is null) return;
        var result = UserManager.AddToRoleAsync(Account, "Admin").Result;
        if (!result.Succeeded)
        {
            ErrorText = string.Join(" ", result.Errors.Select(e => e.Description));
        }
    }

}
