@page "/Registry/{ItemId}"
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@using WeddingWebsite.Components.Containers
@using WeddingWebsite.Components.Elements
@using WeddingWebsite.Components.Sections
@using WeddingWebsite.Models.Registry
@using WeddingWebsite.Services

@inject IRegistryService RegistryService
@inject AuthenticationStateProvider AuthStateProvider

@if (Item == null)
{
    <div class="not-found">
        <p>Sorry, that item could not be found.</p>
        <LinkButton Data=@(new Models.WebsiteElement.LinkButton("Back to Registry", "/registry"))/>
    </div>
    return;
}

<div style="margin-bottom: 100px"></div>
<Section>
    <SideBySide HalfSpacing="10px">
        <LeftContent>
            <img src="@Item.ImageUrl" alt=""/>
        </LeftContent>
        <RightContent>
            <h1>@Item.Name</h1>
            <p class="description">@Item.Description</p>
            @if (Item.MaxQuantity != 1)
            {
                <p>Quantity Claimed: @Item.QuantityClaimed/@Item.MaxQuantity.</p>
            }
            <h2>Purchase Options</h2>
            @foreach (var method in Item.PurchaseMethods)
            {
                <a href="@method.Url" target="_blank" rel="noopener noreferrer" class="purchase-option">
                    <Box>
                        <div class="purchase-option-content">
                            <p class="purchase-option-name">@method.Name</p>
                            <MudSpacer/>
                            <p class="purchase-option-cost">£@method.Cost.ToString("0.00")</p>
                            @if (method.DeliveryCost > 0)
                            {
                                <p class="purchase-option-delivery-cost">+£@method.DeliveryCost.ToString("0.00") delivery</p>
                            }
                            @if (method.Url != null)
                            {
                                <Button>View</Button>
                            }
                        </div>
                    </Box>
                </a>
            }
            <p>Please do not purchase anything before claiming the item (see below) - this will reserve it so we don't get two people buying the same thing!</p>
            @if (UserId != null && Item.NumClaimsByUser(UserId) > 0)
            {
                <h2>Item Claimed</h2>
                <p>Thank you so much for offering to purchase this item! The next step is to choose how you would like to purchase it.</p>
                <div class="choose-purchase-option">
                    @foreach (var method in Item.PurchaseMethods)
                    {
                        <a class="choose-purchase-option-method" @onclick="() => ChoosePurchaseMethod(method.Id)">
                            <Box>
                                <p class="purchase-option-name">@method.Name</p>
                            </Box>
                        </a>
                    }
                </div>
                <p class="claim-item-description">If you've changed your mind and you'd no longer like to buy this item, please unclaim it to make it available to others.</p>
                <Button OnClick="RemoveClaim">Unclaim</Button>
            } else if (Item.IsFullyClaimed)
            {
                <h2>Item Already Claimed</h2>
                <p>Sorry, this item has already been claimed by someone else.</p>
            }
            else
            {
                <h2>Claim this Item</h2>
                <p class="claim-item-description">If you'd like to kindly buy this item for us, the first step is to claim it so that nobody else can buy this item. Once it's claimed, you'll be asked how you want to purchase it.</p>
                <Button OnClick="ClaimItem">Claim</Button>
            }
            <p class="text-danger">@ErrorText</p>
            
        </RightContent>
    </SideBySide>
</Section>


@code {
    [Parameter]
    public required string ItemId { get; set; }
    
    private RegistryItem? Item { get; set; }
    private string? UserId { get; set; }
    
    private string ErrorText { get; set; } = "";

    protected override void OnInitialized() 
    {
        Item = RegistryService.GetRegistryItemById(ItemId);
        
        var authState = AuthStateProvider.GetAuthenticationStateAsync().Result;
        var user = authState.User;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            UserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
    }
    
    private void ClaimItem()
    {
        if (Item == null) return;
        if (Item.IsFullyClaimed)
        {
            ErrorText = "This item has already been claimed.";
            StateHasChanged();
            return;
        }
        if (UserId == null)
        {
            ErrorText = "Failed to obtain user id. Please try again later, or try logging out and back in again.";
            StateHasChanged();
            return;
        }
        var result = RegistryService.ClaimRegistryItem(Item.Id, UserId);
        if (!result)
        {
            ErrorText = "Sorry, this item has already been claimed by someone else.";
        }

        Item = RegistryService.GetRegistryItemById(ItemId);
        StateHasChanged();
    }
    
    private void RemoveClaim()
    {
        if (Item == null) return;
        if (UserId == null)
        {
            ErrorText = "Failed to obtain user id. Please try again later, or try logging out and back in again.";
            StateHasChanged();
            return;
        }
        var result = RegistryService.UnclaimRegistryItem(Item.Id, UserId);
        if (!result)
        {
            ErrorText = "Sorry, we were unable to remove your claim. Please try again later.";
        }

        Item = RegistryService.GetRegistryItemById(ItemId);
        StateHasChanged();
    }
    
    private void ChoosePurchaseMethod(string methodId)
    {
        if (Item == null) return;
        if (UserId == null)
        {
            ErrorText = "Failed to obtain user id. Please try again later, or try logging out and back in again.";
            StateHasChanged();
            return;
        }
        RegistryService.ChoosePurchaseMethod(Item.Id, UserId, methodId);

        Item = RegistryService.GetRegistryItemById(ItemId);
        StateHasChanged();
    }
}
