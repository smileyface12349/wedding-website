@page "/Registry"
@using System.Security.Claims
@using WeddingWebsite.Components.Sections
@using WeddingWebsite.Components.WeddingComponents
@using WeddingWebsite.Models.WebsiteConfig
@using WeddingWebsite.Services
@using RegistryItem = WeddingWebsite.Models.Registry.RegistryItem

@inject IWebsiteConfig Config
@inject IRegistryService RegistryService
@inject AuthenticationStateProvider AuthenticationStateProvider

<CascadingValue Value="Config.RegistryConfig.Theme">
    <Section>
        <div style="margin-top: 100px;"></div>
        <SectionHeading>Registry</SectionHeading>

        @if (Config.OptionalFeatures.Registry.IsActive())
        {
            <p class="claim-item-description">Gifts are not required, but if you would like to give us a gift, here's some suggestions. If you'd prefer to give something else, that's fine too!</p>
            <MudSelect T="SortOrder" @bind-Value="CurrentSortOrder" Label="Sort By" Style="margin-bottom: 20px; margin-right: 20px; margin-top: 20px;">
                <MudSelectItem T="SortOrder" Value="SortOrder.Default">Default</MudSelectItem>
                <MudSelectItem T="SortOrder" Value="SortOrder.PriceLowToHigh">Price: Low to High</MudSelectItem>
                <MudSelectItem T="SortOrder" Value="SortOrder.PriceHighToLow">Price: High to Low</MudSelectItem>
            </MudSelect>
            <MudSelect T="string" MultiSelection="true" @bind-Value="EnabledFiltersString" @bind-SelectedValues="EnabledFilters" Label="Filters">
                @foreach (var filter in AllFilters)
                {
                    <MudSelectItem T="string" Value="@filter">@filter</MudSelectItem>
                }
                <AuthorizeView Roles="Admin">
                    <Authorized>
                        @foreach (var filter in AdminExclusiveFilters)
                        {
                            <MudSelectItem T="string" Value="@filter">@filter</MudSelectItem>
                        }
                    </Authorized>
                </AuthorizeView>
            </MudSelect>
            <div class="gifts-grid">
                @if (UserId != null && RegistryItems.Any(item => item.NumClaimsByUser(UserId) > 0))
                {
                    <h2 class="grid-heading">Items You've Claimed</h2>
                    @foreach (var item in RegistryItems.Where(item => item.NumClaimsByUser(UserId) > 0))
                    {
                        <div class="gift">
                            <RegistryItem Item="item" ButtonText="@(item.GetClaimByUser(UserId).IsCompleted ? "Completed" : "Pending")" ButtonSuccess="@(!item.GetClaimByUser(UserId).IsCompleted)"/>
                        </div>
                    }
                    <h2 class="grid-heading">Other Registry Items</h2>
                }
                @foreach (var item in SortedAndFilteredItems.Where(item => UserId == null || item.NumClaimsByUser(UserId) == 0).Where(item => !item.Hide))
                {
                    <div class="gift">
                        <RegistryItem Item="item" ButtonText="@(item.IsFullyClaimed ? "Claimed" : "Available")" ButtonSuccess="@(!item.IsFullyClaimed)"/>
                    </div>
                }
                @if (!SortedAndFilteredItems.Any())
                {
                    <p class="grid-heading">There are no items matching the selected filters. Did you mean to remove the "Unclaimed" filter?</p>
                }
                <AuthorizeView Roles="Admin">
                    <Authorized>
                        <h2 class="grid-heading">Hidden Items (Admin Only)</h2>
                        @if (RegistryItems.Any(item => item.Hide))
                        {
                            @foreach (var item in RegistryItems.Where(item => item.Hide))
                            {
                                <div class="gift">
                                    <RegistryItem Item="item" ButtonText="@(item.IsFullyClaimed ? "Claimed" : "Available")" ButtonSuccess="@(!item.IsFullyClaimed)"/>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="grid-heading">There are no hidden items. If you mark an item as hidden, it won't appear in search results but it will be available to claim if people obtain the link to it.</p>
                        }
                    </Authorized>
                </AuthorizeView>
            </div>
            <AuthorizeView Roles="Admin">
                <Authorized>
                    <h2>Add New Item (Admin Only)</h2>
                    <p>Add a new item to the registry.</p>
                    <a href="/registry/new" class="new-item-button">Add Item</a>
                </Authorized>
            </AuthorizeView>

        }
        else
        {
            <p>The registry is @Config.OptionalFeatures.Registry.IsActiveString().</p>
        }
    </Section>
</CascadingValue>

@code {
    private IEnumerable<RegistryItem> RegistryItems { get; set; } = [];
    private IEnumerable<RegistryItem> SortedAndFilteredItems => RegistryItems
        .Where(ItemMatchesFilter)
        .OrderBy(item =>
        {
            switch (CurrentSortOrder)
            {
                case SortOrder.Default:
                    return -item.Priority;
                case SortOrder.PriceLowToHigh:
                    return item.CheapestCost;
                case SortOrder.PriceHighToLow:
                    return -item.CheapestCost;
                default:
                    return 0;
            }
        });
    private string? UserId { get; set; }

    private IEnumerable<string> EnabledFilters { get; set; } = new HashSet<string> { "Unclaimed" };
    private string EnabledFiltersString { get; set; } = "";
    private readonly string[] AllFilters =
    [
        "Under £25",
        "Under £50",
        "Unclaimed"
    ];
    private readonly string[] AdminExclusiveFilters =
    [
        "Bring on day",
        "Deliver to us",
        "Pending",
        "Completed"
    ];

    private enum SortOrder
    {
        Default,
        PriceLowToHigh,
        PriceHighToLow
    }
    
    private SortOrder CurrentSortOrder { get; set; } = SortOrder.Default;
    
    protected override async Task OnInitializedAsync()
    {
        if (Config.OptionalFeatures.Registry.IsActive())
        {
            RegistryItems = await RegistryService.GetAllRegistryItems();
        }
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity is { IsAuthenticated: true })
        {
            UserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
    }

    private bool ItemMatchesFilter(RegistryItem item)
    {
        if (EnabledFilters.Contains("Unclaimed") && item.IsFullyClaimed)
        {
            return false;
        }
        if (EnabledFilters.Contains("Under £25") && item.PurchaseMethods.All(pm => pm.Cost >= 25))
        {
            return false;
        }
        if (EnabledFilters.Contains("Under £50") && item.PurchaseMethods.All(pm => pm.Cost >= 50))
        {
            return false;
        }
        // Admin exclusive filters
        if (EnabledFilters.Contains("Bring on day") && item.Claims.All(claim => claim.DeliveryAddress != RegistryItemPage.DeliveryAddressBringOnDay))
        {
            return false;
        }
        if (EnabledFilters.Contains("Deliver to us") && item.Claims.All(claim => claim.DeliveryAddress == RegistryItemPage.DeliveryAddressBringOnDay))
        {
            return false;
        }
        if (EnabledFilters.Contains("Pending") && item.Claims.All(c => c.IsCompleted))
        {
            return false;
        }
        if (EnabledFilters.Contains("Completed") && item.Claims.All(c => !c.IsCompleted))
        {
            return false;
        }
        return true;
    }
}