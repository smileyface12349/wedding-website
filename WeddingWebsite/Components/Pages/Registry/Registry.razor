@page "/Registry"
@using System.Security.Claims
@using WeddingWebsite.Components.Sections
@using WeddingWebsite.Components.WeddingComponents
@using WeddingWebsite.Models.WebsiteConfig
@using WeddingWebsite.Services
@using RegistryItem = WeddingWebsite.Models.Registry.RegistryItem

@inject IWebsiteConfig Config
@inject IRegistryService RegistryService
@inject AuthenticationStateProvider AuthenticationStateProvider

<CascadingValue Value="Config.RegistryConfig.Theme">
    <Section>
        <div style="margin-top: 100px;"></div>
        <SectionHeading>Registry</SectionHeading>

        @if (Config.OptionalFeatures.Registry.IsActive())
        {
            <p>Gifts are not required, but if you would like to give us a gift, here's some suggestions. If you'd prefer to give something else, that's fine too!</p>
            <div class="gifts-grid">
                @if (UserId != null && RegistryItems.Any(item => item.NumClaimsByUser(UserId) > 0))
                {
                    <h2 class="grid-heading">Items You've Claimed</h2>
                    @foreach (var item in RegistryItems.Where(item => item.NumClaimsByUser(UserId) > 0))
                    {
                        <div class="gift">
                            <RegistryItem Item="item" ButtonText="@(item.GetClaimByUser(UserId).IsCompleted ? "Completed" : "Pending")" ButtonSuccess="@(!item.GetClaimByUser(UserId).IsCompleted)"/>
                        </div>
                    }
                    <h2 class="grid-heading">Other Registry Items</h2>
                }
                @foreach (var item in RegistryItems.Where(item => UserId == null || item.NumClaimsByUser(UserId) == 0).Where(item => !item.Hide))
                {
                    <div class="gift">
                        <RegistryItem Item="item" ButtonText="@(item.IsFullyClaimed ? "Claimed" : "Available")" ButtonSuccess="@(!item.IsFullyClaimed)"/>
                    </div>
                }
                <AuthorizeView Roles="Admin">
                    <Authorized>
                        <h2 class="grid-heading">Hidden Items (Admin Only)</h2>
                        @if (RegistryItems.Any(item => item.Hide))
                        {
                            @foreach (var item in RegistryItems.Where(item => item.Hide))
                            {
                                <div class="gift">
                                    <RegistryItem Item="item" ButtonText="@(item.IsFullyClaimed ? "Claimed" : "Available")" ButtonSuccess="@(!item.IsFullyClaimed)"/>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="grid-heading">There are no hidden items. If you mark an item as hidden, it won't appear in search results but it will be available to claim if people obtain the link to it.</p>
                        }
                    </Authorized>
                </AuthorizeView>
            </div>
            <AuthorizeView Roles="Admin">
                <Authorized>
                    <h2>Add New Item (Admin Only)</h2>
                    <p>Add a new item to the registry.</p>
                    <a href="/registry/new" class="new-item-button">Add Item</a>
                </Authorized>
            </AuthorizeView>

        }
        else
        {
            <p>The registry is @Config.OptionalFeatures.Registry.IsActiveString().</p>
        }
    </Section>
</CascadingValue>

@code {
    private IEnumerable<RegistryItem> RegistryItems { get; set; } = [];
    private string? UserId { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        if (Config.OptionalFeatures.Registry.IsActive())
        {
            RegistryItems = await RegistryService.GetAllRegistryItems();
        }
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity is { IsAuthenticated: true })
        {
            UserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
    }
}