@page "/account"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using WeddingWebsite.Components.Sections
@using WeddingWebsite.Components.Containers
@using WeddingWebsite.Models
@using WeddingWebsite.Models.Accounts
@using WeddingWebsite.Models.Theme
@using WeddingWebsite.Models.WebsiteConfig
@using WeddingWebsite.Models.WeddingDetails
@using WeddingWebsite.Services
@using Section = WeddingWebsite.Components.Sections.Section

@attribute [Authorize]

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IWebsiteConfig Config
@inject IWeddingDetails WeddingDetails
@inject UserManager<Data.Account> UserManager
@inject ISnackbar Snackbar

@rendermode InteractiveServer

<MudSnackbarProvider />

<PageTitle>My Account</PageTitle>

<CascadingValue TValue="SectionTheme" Value="ThemeNoBackground">
    <Section Center="true">
        <div style="margin-top: 150px"></div>
        <SectionHeading>Your Account</SectionHeading>
        <div class="account-content">
            <div class="account-details">
                <div class="account-detail">
                    <label for="email">E-mail Address</label>
                    <MudSpacer/>
                    <input aria-disabled="true" value="@Email" id="email" disabled/>
                </div>
                @if (ShowChangePassword)
                {
                    <EditForm Model="ChangePasswordInput" method="post" OnValidSubmit="ChangePassword" FormName="change-password">
                        <DataAnnotationsValidator />
                        <div class="account-detail">
                            <label for="old-password">Current Password</label>
                            <MudSpacer/>
                            <input type="password" @bind-value="ChangePasswordInput.OldPassword" id="old-password" placeholder="Old Password" />
                        </div>
                        <div class="account-detail">
                            <label for="new-password">New Password</label>
                            <MudSpacer/>
                            <input type="password" @bind-value="ChangePasswordInput.NewPassword" id="new-password" placeholder="New Password" />
                        </div>
                        <div class="account-detail">
                            <label for="confirm-new-password">Confirm Password</label>
                            <MudSpacer/>
                            <input type="password" @bind-value="ChangePasswordInput.ConfirmNewPassword" id="confirm-new-password" placeholder="New Password" />
                        </div>
                        <ValidationSummary class="text-danger" role="alert"/>
                        @if (ErrorText != "")
                        {
                            <p class="text-danger">@ErrorText</p>
                        }
                        <div class="change-password-buttons">
                            <button type="submit" style="background: @Theme?.Primary">Submit</button>
                            <button class="cancel-button" @onclick="() => ShowChangePassword = false">Cancel</button>
                        </div>
                    </EditForm>
                }
                else
                {
                    <div class="account-detail">
                        <label for="change-password">Password</label>
                        <MudSpacer/>
                        <a id="change-password" @onclick="EnableChangePassword">Change Password</a>
                    </div>
                }
            </div>
            <SectionHeading>Guests</SectionHeading>
            <div class="warning-message">
                <MudIcon Icon="@Icons.Material.Filled.Warning"/>
                <p>RSVPs are not yet open.</p>
            </div>
            @if (Guests.Count() > 1)
            {
                <p>Your account is shared between @Guests.Count() guests. Feel free to share your login details amongst all the guests tied to this account (they won't be able to access the website otherwise).</p>
            }
            <div class="guests-list">
                @foreach (var guest in Guests)
                {
                    <Box>
                        <div class="guest">
                            <span class="guest-name">@guest.Name.Full</span>
                            <MudSpacer/>
                            <button class="rsvp-button" disabled>RSVP</button>
                        </div>
                    </Box>
                    <div style="margin-bottom: 10px"></div>
                }
            </div>

            @if (Guests.Any())
            {
                <p>Unfortunately, we are unable to accommodate any extra +1's.</p>
            }
            else
            {
                <p>Your account does not have any guests associated with it. If you think this is an error, please contact @WeddingDetails.LoginContactMethod?.Text as soon as possible.</p>
            }
        </div>
    </Section>
</CascadingValue>

<style>
    body {
        @(Theme?.Background.GetBackgroundCss() ?? Config.Colours.Surface.GetBackgroundCss()) !important;
    }
</style>

@code {
    [Inject]
    public required IAccountService AccountService { get; set; }
    [SupplyParameterFromForm]
    private ChangePasswordInputModel ChangePasswordInput { get; set; } = new();

    private IEnumerable<Guest> Guests { get; set; } = [];
    private SectionTheme? Theme => Config.AccountConfig.Theme;
    private SectionTheme? ThemeNoBackground
    {
        get
        {
            if (Theme != null) return Theme with { Background = new NoBackground() };
            return null;
        }
    }

    private string ErrorText { get; set; } = "";
    private string Email { get; set; } = "";
    private bool ShowChangePassword { get; set; } = false;
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity is not { IsAuthenticated: true })
        {
            return;
        }
        
        Guests = AccountService.GetOwnGuests(user);
        
        Email = user.Identity?.Name ?? "";
    }

    private void EnableChangePassword()
    {
        ShowChangePassword = true;
    }
    
    private void ChangePassword()
    {
        var account = UserManager.FindByEmailAsync(Email).Result;
        if (account == null)
        {
            ErrorText = "Could not find your account.";
            return;
        }
        
        var passwordValid = UserManager.CheckPasswordAsync(account, ChangePasswordInput.OldPassword).Result;
        if (!passwordValid)
        {
            ErrorText = "Access denied - The current password is incorrect.";
            return;
        }
        
        var token = UserManager.GeneratePasswordResetTokenAsync(account).Result;
        var result = UserManager.ResetPasswordAsync(account, token, ChangePasswordInput.NewPassword).Result;
        if (!result.Succeeded)
        {
            ErrorText = string.Join(" ", result.Errors.Select(e => e.Description));
        }
        else
        {
            ChangePasswordInput.OldPassword = "";
            ChangePasswordInput.NewPassword = "";
            ChangePasswordInput.ConfirmNewPassword = "";
            ShowChangePassword = false;
            ErrorText = "";
            
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;
            Snackbar.Add("Password changed successfully.", Severity.Success, c => c.SnackbarVariant = Variant.Text);
            
            AccountService.Log(Email, AccountLogType.ChangePassword, "User changed their password");
        }
    }
    
    private sealed class ChangePasswordInputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current Password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "Passwords must be at least 5 characters.", MinimumLength = 5)]
        [DataType(DataType.Password)]
        [Display(Name = "New Password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm New Password")]
        [Compare("NewPassword", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmNewPassword { get; set; } = "";
    }
}