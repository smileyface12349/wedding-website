@using MudBlazor
@using WeddingWebsite.Components.Containers
@using WeddingWebsite.Core
@using WeddingWebsite.Models.People
@using WeddingWebsite.Models.Theme
@using WeddingWebsite.Models.WebsiteConfig

<div class="container">
    <h2>What is your enquiry about?</h2>
    <MudSelect Class="@MudSelectClass" @bind-Value="ContactReason" Label="Category of Enquiry" Variant="Variant.Outlined" Required="true">
        @foreach (var reason in ReasonsToShow) {
            <MudSelectItem Value="(ContactReason?) reason">@reason.GetEnumDescription()</MudSelectItem>
        }
    </MudSelect>

    @if (ShowUrgencyOption) {
        <h2>Is it urgent?</h2>
        <YesOrNoToggleGroup @bind-Value="IsUrgent"/>
        <p class="text-below">@ResponseTimelineString</p>
    }
    
    <h2>Suggested contacts</h2>
    @if (!MatchingContacts.Any()) {
        @if (ContactReason == null) {
            <p>Choose a category of enquiry to see contacts.</p>
        } else {
            <p>No contacts found. Try a different search.</p>
        }
    }
    @foreach (var contact in MatchingContacts) {
        <BoxClient Theme="Theme">
            <h3>@contact.NameAndRole</h3>
            @foreach (var method in contact.ContactDetails.GetOptions(Urgency).Methods) {
                @if (method.Link != null) {
                    <p>@method.Type: <a href="@method.Link" target="_blank" rel="noopener noreferrer">@method.Text</a></p>
                }
                else {
                    <p>@method.Type: @method.Text</p>
                }
            }
        </BoxClient>
        <div style="height: 10px;"></div>
    }
</div>

@code {
    [Parameter]
    public required IEnumerable<IContact> Contacts { get; set; }
    
    [Parameter]
    public required IEnumerable<ContactReason> ReasonsToShow { get; set; }
    
    [Parameter]
    public required bool ShowUrgencyOption { get; set; }
    
    [CascadingParameter]
    public SectionTheme? Theme { get; set; }
    
    private string MudSelectClass => Theme is {Background.IsDark: true} ? "mud-component-on-dark-background": "";
    
    private ContactReason? ContactReason { get; set; }

    private bool IsUrgent { get; set; } = false;
    private ContactUrgency Urgency => IsUrgent ? ContactUrgency.Urgent : ContactUrgency.NotUrgent;
    
    private string ResponseTimelineString => Urgency == ContactUrgency.Urgent ? "We'll get back to you as soon as possible." : "We'll get back to you within 48 hours.";
    
    private IEnumerable<IContact> MatchingContacts => ContactReason == null ? [] : Contacts
        .Where(c => c.ContactDetails.GetOptions(Urgency).MatchesReason(ContactReason.Value));

}